{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"Text to Embedding","provenance":[],"collapsed_sections":[]},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"},"accelerator":"GPU"},"cells":[{"cell_type":"code","execution_count":1,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"1E2VysIvyyMk","executionInfo":{"status":"ok","timestamp":1649438659153,"user_tz":240,"elapsed":15102,"user":{"displayName":"ECE324 Group","userId":"00541832639107211620"}},"outputId":"6e1108ae-5b5b-4b2f-a35b-ae7bcc74f4a2"},"outputs":[{"output_type":"stream","name":"stdout","text":["\u001b[?25l\r\u001b[K     |█████▊                          | 10 kB 21.7 MB/s eta 0:00:01\r\u001b[K     |███████████▍                    | 20 kB 16.7 MB/s eta 0:00:01\r\u001b[K     |█████████████████▏              | 30 kB 10.6 MB/s eta 0:00:01\r\u001b[K     |██████████████████████▉         | 40 kB 4.9 MB/s eta 0:00:01\r\u001b[K     |████████████████████████████▌   | 51 kB 4.9 MB/s eta 0:00:01\r\u001b[K     |████████████████████████████████| 57 kB 2.6 MB/s \n","\u001b[?25h  Building wheel for objax (setup.py) ... \u001b[?25l\u001b[?25hdone\n"]}],"source":["import csv\n","from typing import Callable, Tuple\n","\n","import jax.numpy as jn\n","import matplotlib.pyplot as plt\n","import numpy as np\n","from jax import lax\n","from keras.preprocessing.sequence import pad_sequences\n","from keras.preprocessing.text import Tokenizer\n","from tqdm import trange\n","from sklearn.model_selection import train_test_split\n","%pip --quiet install objax\n","import objax\n","from objax.typing import JaxArray\n","\n","\n","objax.random.DEFAULT_GENERATOR.seed(42)\n","np.random.seed(42)"]},{"cell_type":"code","source":["max_vocab = 2000  # this parameter is for the maximum number of words in the \"dictionary\"\n","max_len = 200  # maximum length of each review\n","embedding_size = 30  # size of embedding\n","num_hidden_units_GRU = 30  # GRU cells in the RNN layer\n","num_hidden_units = 20  # hidden unit of dense network after GRU\n","\n","vocab_size = max_vocab\n","filename = 'reviews_short.csv'\n","# filename = 'reviews_long.csv'"],"metadata":{"id":"dltsa0CW1Y4V","executionInfo":{"status":"ok","timestamp":1649438659155,"user_tz":240,"elapsed":16,"user":{"displayName":"ECE324 Group","userId":"00541832639107211620"}}},"execution_count":2,"outputs":[]},{"cell_type":"code","source":["def data_processing(filename, max_vocab, max_len):\n","  # filename: the name of the .csv file\n","  # max_vocab: The maximum number of words\n","  # max_len: \n","  messages = []  # a list contains the reviews\n","  labels = []  # a list contains the labels\n","  with open(filename, 'r') as file:\n","      reader = csv.reader(file)\n","      firstline = True\n","      for row in reader:\n","        if firstline:\n","            firstline = False\n","            continue\n","        else:\n","            messages.append(row[0])\n","            labels.append(int(row[1]=='positive'))\n","  print(messages[0])\n","  print(len(messages))\n","\n","  tokenizer = Tokenizer(num_words=max_vocab)\n","  tokenizer.fit_on_texts(messages)\n","  messages_seq = tokenizer.texts_to_sequences(messages)\n","  data = pad_sequences(messages_seq, maxlen=max_len) \n","  train_size = 0.8\n","  messages_train, messages_valid_test, labels_train, labels_valid_test  = train_test_split(data, labels, train_size=train_size)\n","  messages_valid, messages_test, labels_valid, labels_test  = train_test_split(messages_valid_test, labels_valid_test, train_size=0.5)\n","  return np.array(messages_train), np.array(labels_train), np.array(messages_valid), np.array(labels_valid), np.array(messages_test), np.array(labels_test)"],"metadata":{"id":"zJmZUPuW1iFM","executionInfo":{"status":"ok","timestamp":1649439622597,"user_tz":240,"elapsed":143,"user":{"displayName":"ECE324 Group","userId":"00541832639107211620"}}},"execution_count":23,"outputs":[]},{"cell_type":"code","source":["messages_train, labels_train, messages_valid, labels_valid, messages_test, labels_test = data_processing(filename, max_vocab, max_len)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"xXxs7iFU65Ut","executionInfo":{"status":"ok","timestamp":1649439627351,"user_tz":240,"elapsed":4604,"user":{"displayName":"ECE324 Group","userId":"00541832639107211620"}},"outputId":"a8361eb4-e55e-4295-92f8-ba36c14d918b"},"execution_count":24,"outputs":[{"output_type":"stream","name":"stdout","text":["Chinatown is flush with Chinese restaurants densely packed on every block - most of which, in my opinion at least, have adapted strongly to the American...\n","89763\n"]}]},{"cell_type":"code","source":["# This will output representation of one sentence \n","print(messages_train[0])\n","print(len(messages_train[0]))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"09mgPEvx7a-2","executionInfo":{"status":"ok","timestamp":1649438730285,"user_tz":240,"elapsed":16,"user":{"displayName":"ECE324 Group","userId":"00541832639107211620"}},"outputId":"ec359848-29c3-4382-bfc5-1a814b9c2310"},"execution_count":7,"outputs":[{"output_type":"stream","name":"stdout","text":["[   0    0    0    0    0    0    0    0    0    0    0    0    0    0\n","    0    0    0    0    0    0    0    0    0    0    0    0    0    0\n","    0    0    0    0    0    0    0    0    0    0    0    0    0    0\n","    0    0    0    0    0    0    0    0    0    0    0    0    0    0\n","    0    0    0    0    0    0    0    0    0    0    0    0    0    0\n","    0    0    0    0    0    0    0    0    0    0    0    0    0    0\n","    0    0    0    0    0    0    0    0    0    0    0    0    0    0\n","    0    0    0    0    0    0    0    0    0    0    0    0    0    0\n","    0    0    0    0    0    0    0    0    0    0    0    0    0    0\n","    0    0    0    0    0    0    0    0    0    0    0    0    0    0\n","    0    0    0    0    0    0    0    0    0    0    0    0    0    0\n","    0    0    0    0    0    0    0    0    0    0    0    0    0    0\n","    0    0    0    0    0    0    0    0    0    0    0    0    0    0\n","   10   16    7    3  335   69   65    1 1266    2  525  346  214    8\n","    3  193   84  560]\n","200\n"]}]},{"cell_type":"code","source":["class Embed(objax.Module):\n","    def __init__(self, size: int, latent: int, init: Callable = objax.nn.init.xavier_truncated_normal):\n","        self.w = objax.TrainVar(init((size, latent)))\n","\n","    def __call__(self, x: JaxArray) -> JaxArray:\n","        return self.w.value[x]"],"metadata":{"id":"qNhIR3Xw7xC8","executionInfo":{"status":"ok","timestamp":1649438730286,"user_tz":240,"elapsed":14,"user":{"displayName":"ECE324 Group","userId":"00541832639107211620"}}},"execution_count":8,"outputs":[]},{"cell_type":"code","source":["class GRU(objax.Module):\n","    def __init__(self, nin: int, nout: int,\n","                 init_w: Callable = objax.nn.init.xavier_truncated_normal,\n","                 init_b: Callable = objax.nn.init.truncated_normal):\n","        self.update_w = objax.TrainVar(init_w((nin, nout)))\n","        self.update_u = objax.TrainVar(init_w((nout, nout)))\n","        self.update_b = objax.TrainVar(init_b((nout,), stddev=0.01))\n","        self.reset_w = objax.TrainVar(init_w((nin, nout)))\n","        self.reset_u = objax.TrainVar(init_w((nout, nout)))\n","        self.reset_b = objax.TrainVar(init_b((nout,), stddev=0.01))\n","        self.output_w = objax.TrainVar(init_w((nin, nout)))\n","        self.output_u = objax.TrainVar(init_w((nout, nout)))\n","        self.output_b = objax.TrainVar(init_b((nout,), stddev=0.01))\n","\n","    def __call__(self, x: JaxArray, initial_state: JaxArray) -> Tuple[JaxArray, JaxArray]:\n","        def scan_op(state: JaxArray, x: JaxArray) -> JaxArray:  # State must come first for lax.scan\n","            # fill this in\n","            update_gate = objax.functional.sigmoid(jn.matmul(x, self.update_w.value) + jn.matmul(state, self.update_u.value) + self.update_b.value) \n"," \n","            # fill this in\n","            reset_gate = objax.functional.sigmoid(jn.matmul(x, self.reset_w.value) + jn.matmul(state, self.reset_u.value) + self.reset_b.value) \n","            \n","            # fill this in\n","            output_gate = objax.functional.tanh(jn.matmul(x, self.output_w.value) + jn.matmul(jn.multiply(reset_gate, state), self.output_u.value) + self.output_b.value) \n","            \n","            #return update_gate * state + (1 - update_gate) * output_gate, 0  # we don't use the output, return 0.\n","            return (1-update_gate) * state + (update_gate) * output_gate, 0   # we don't use the output, return 0.\n","\n","        return lax.scan(scan_op, initial_state, x.transpose((1, 0, 2)))[0]"],"metadata":{"id":"WenE1tWn87bo","executionInfo":{"status":"ok","timestamp":1649438730287,"user_tz":240,"elapsed":13,"user":{"displayName":"ECE324 Group","userId":"00541832639107211620"}}},"execution_count":9,"outputs":[]},{"cell_type":"code","source":["# fill this in: \n","gru_rnn = objax.nn.Sequential([   \n","    Embed(max_vocab, embedding_size),   \n","    GRU(embedding_size, num_hidden_units_GRU),\n","    objax.nn.Linear(num_hidden_units_GRU, num_hidden_units),\n","    objax.functional.relu,\n","    objax.nn.Linear(num_hidden_units, 2)\n","])"],"metadata":{"id":"CYE60g2K9CCw","executionInfo":{"status":"ok","timestamp":1649438739861,"user_tz":240,"elapsed":9586,"user":{"displayName":"ECE324 Group","userId":"00541832639107211620"}}},"execution_count":10,"outputs":[]},{"cell_type":"code","source":["print(f'{\" Network \":-^79}')\n","print(gru_rnn.vars())"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"Ky3r6cSn9ZIm","executionInfo":{"status":"ok","timestamp":1649438739862,"user_tz":240,"elapsed":17,"user":{"displayName":"ECE324 Group","userId":"00541832639107211620"}},"outputId":"139f8cb3-b0e3-4a3f-c145-3ada9dbf2787"},"execution_count":11,"outputs":[{"output_type":"stream","name":"stdout","text":["----------------------------------- Network -----------------------------------\n","(Sequential)[0](Embed).w         60000 (2000, 30)\n","(Sequential)[1](GRU).update_w      900 (30, 30)\n","(Sequential)[1](GRU).update_u      900 (30, 30)\n","(Sequential)[1](GRU).update_b       30 (30,)\n","(Sequential)[1](GRU).reset_w       900 (30, 30)\n","(Sequential)[1](GRU).reset_u       900 (30, 30)\n","(Sequential)[1](GRU).reset_b        30 (30,)\n","(Sequential)[1](GRU).output_w      900 (30, 30)\n","(Sequential)[1](GRU).output_u      900 (30, 30)\n","(Sequential)[1](GRU).output_b       30 (30,)\n","(Sequential)[2](Linear).b           20 (20,)\n","(Sequential)[2](Linear).w          600 (30, 20)\n","(Sequential)[4](Linear).b            2 (2,)\n","(Sequential)[4](Linear).w           40 (20, 2)\n","+Total(14)                       66152\n"]}]},{"cell_type":"code","source":["## Your implementaiton of the optimizer should go here\n","opt = objax.optimizer.SGD(gru_rnn.vars())"],"metadata":{"id":"KkDdQwKZ9jqf","executionInfo":{"status":"ok","timestamp":1649438739863,"user_tz":240,"elapsed":14,"user":{"displayName":"ECE324 Group","userId":"00541832639107211620"}}},"execution_count":12,"outputs":[]},{"cell_type":"code","source":["def loss_function(x: JaxArray, y: JaxArray):\n","    logits = gru_rnn(x, initial_state=jn.zeros((x.shape[0], num_hidden_units_GRU)))\n","    return objax.functional.loss.cross_entropy_logits_sparse(logits, y).sum()\n","\n","\n","gv = objax.GradValues(loss_function, gru_rnn.vars())\n","\n","\n","@objax.Function.with_vars(gv.vars() + opt.vars())\n","def train_op(x: JaxArray, y: JaxArray, lr: float):\n","    g, loss = gv(x, y)\n","    opt(lr, g)\n","    return loss\n","\n","\n","train_op = objax.Jit(train_op)\n","eval_op = objax.Jit(lambda x: gru_rnn(x, initial_state=jn.zeros((x.shape[0], num_hidden_units_GRU))),\n","                    gru_rnn.vars())\n"],"metadata":{"id":"nYsXzBqF-AEL","executionInfo":{"status":"ok","timestamp":1649438739864,"user_tz":240,"elapsed":14,"user":{"displayName":"ECE324 Group","userId":"00541832639107211620"}}},"execution_count":13,"outputs":[]},{"cell_type":"code","source":["def accuracy(data_loader):\n","    \"\"\"Compute the accuracy for a provided data loader\"\"\"\n","    acc_total = 0\n","    x, y = data_loader\n","    batch_size_acc = 500\n","    for batch_idx in np.array_split(np.arange(len(x)), len(x) // batch_size_acc):\n","        x_batch, target_class = x[batch_idx], y[batch_idx]\n","        predicted_class = eval_op(x_batch).argmax(1)\n","        acc_total += (predicted_class == target_class).sum()\n","    return acc_total / len(x)"],"metadata":{"id":"j_4Qjs-L-DCO","executionInfo":{"status":"ok","timestamp":1649438739865,"user_tz":240,"elapsed":14,"user":{"displayName":"ECE324 Group","userId":"00541832639107211620"}}},"execution_count":14,"outputs":[]},{"cell_type":"code","source":["learning_rate = 1e-3 # learning rate\n","num_epochs = 20 # number of epochs\n","batch_size = 250  # batch size\n","\n","training_data = (messages_train, labels_train)\n","validation_data = (messages_valid, labels_valid)\n","test_data = (messages_test, labels_test)"],"metadata":{"id":"hTzZXLkG-GgK","executionInfo":{"status":"ok","timestamp":1649438739866,"user_tz":240,"elapsed":14,"user":{"displayName":"ECE324 Group","userId":"00541832639107211620"}}},"execution_count":15,"outputs":[]},{"cell_type":"code","source":["# you code for the training loop should start here \n","def train(EPOCHS = 20, BATCH = 32, LEARNING_RATE = 9e-4):\n","  avg_train_loss_epoch = []\n","  avg_val_loss_epoch = [] \n","  train_acc_epoch = [] \n","  val_acc_epoch = []\n","\n","  for epoch in range(EPOCHS):\n","      avg_train_loss = 0 # (averaged) training loss per batch\n","      avg_val_loss =  0  # (averaged) validation loss per batch\n","      train_acc = 0      # training accuracy per batch\n","      val_acc = 0        # validation accuracy per batch\n","\n","      # shuffle the examples prior to training to remove correlation \n","      train_indices = np.arange(len(messages_train)) \n","      np.random.shuffle(train_indices)\n","      for it in range(0, messages_train.shape[0], BATCH):\n","          batch = train_indices[it:it+BATCH] # put code here\n","          avg_train_loss += float(train_op(messages_train[batch], labels_train[batch], LEARNING_RATE)[0]) * len(batch)\n","          train_prediction = eval_op(messages_train[batch]).argmax(1)\n","          train_acc += (np.array(train_prediction).flatten() == labels_train[batch]).sum()\n","      train_acc_epoch.append(train_acc/messages_train.shape[0])   \n","      avg_train_loss_epoch.append(avg_train_loss/messages_train.shape[0])\n","\n","      # run validation\n","      val_indices = np.arange(len(messages_valid)) \n","      np.random.shuffle(val_indices)    \n","      for it in range(0, messages_valid.shape[0], BATCH):\n","          batch = val_indices[it:it+BATCH] # put code here\n","          avg_val_loss += float(loss_function(messages_valid[batch], labels_valid[batch])) * len(batch) \n","          val_prediction = eval_op(messages_valid[batch]).argmax(1)\n","          val_acc += (np.array(val_prediction).flatten() == labels_valid[batch]).sum()\n","      val_acc_epoch.append(val_acc/messages_valid.shape[0])\n","      avg_val_loss_epoch.append(avg_val_loss/messages_valid.shape[0])\n","\n","      print('Epoch %04d  Training Loss %.2f Validation Loss %.2f Training Accuracy %.2f Validation Accuracy %.2f' % (epoch + 1, avg_train_loss/messages_train.shape[0], avg_val_loss/messages_valid.shape[0], 100*train_acc/messages_train.shape[0], 100*val_acc/messages_valid.shape[0]))\n","  \n","  #Plot training loss\n","  plt.title(\"Train vs Validation Loss\")\n","  plt.plot(avg_train_loss_epoch, label=\"Train\")\n","  plt.plot(avg_val_loss_epoch, label=\"Validation\")\n","  plt.xlabel(\"Epoch\")\n","  plt.ylabel(\"Loss\")\n","  plt.legend(loc='best')\n","  plt.show()\n","\n","  plt.title(\"Train vs Validation Accuracy\")\n","  plt.plot(train_acc_epoch, label=\"Train\")\n","  plt.plot(val_acc_epoch, label=\"Validation\")\n","  plt.xlabel(\"Epoch\")\n","  plt.ylabel(\"Accuracy (%)\")\n","  plt.legend(loc='best')\n","  plt.show()"],"metadata":{"id":"a92T6fMg-JTr","executionInfo":{"status":"ok","timestamp":1649438739866,"user_tz":240,"elapsed":13,"user":{"displayName":"ECE324 Group","userId":"00541832639107211620"}}},"execution_count":16,"outputs":[]},{"cell_type":"code","source":["train(num_epochs, batch_size, learning_rate)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":920},"id":"iT8YjkzH-Mic","executionInfo":{"status":"ok","timestamp":1649439142114,"user_tz":240,"elapsed":402260,"user":{"displayName":"ECE324 Group","userId":"00541832639107211620"}},"outputId":"a0681b92-944f-44bf-9b60-5b9c1dd9f187"},"execution_count":17,"outputs":[{"output_type":"stream","name":"stdout","text":["Epoch 0001  Training Loss 140.77 Validation Loss 138.02 Training Accuracy 74.89 Validation Accuracy 75.50\n","Epoch 0002  Training Loss 138.68 Validation Loss 134.09 Training Accuracy 74.89 Validation Accuracy 75.50\n","Epoch 0003  Training Loss 134.80 Validation Loss 125.75 Training Accuracy 74.93 Validation Accuracy 75.50\n","Epoch 0004  Training Loss 128.21 Validation Loss 116.45 Training Accuracy 75.41 Validation Accuracy 77.13\n","Epoch 0005  Training Loss 124.17 Validation Loss 116.57 Training Accuracy 76.36 Validation Accuracy 78.04\n","Epoch 0006  Training Loss 119.34 Validation Loss 115.90 Training Accuracy 78.22 Validation Accuracy 77.89\n","Epoch 0007  Training Loss 114.94 Validation Loss 104.85 Training Accuracy 79.28 Validation Accuracy 80.78\n","Epoch 0008  Training Loss 112.06 Validation Loss 105.87 Training Accuracy 79.96 Validation Accuracy 80.48\n","Epoch 0009  Training Loss 109.38 Validation Loss 101.24 Training Accuracy 80.35 Validation Accuracy 81.54\n","Epoch 0010  Training Loss 105.63 Validation Loss 98.88 Training Accuracy 81.68 Validation Accuracy 82.38\n","Epoch 0011  Training Loss 102.44 Validation Loss 98.50 Training Accuracy 82.45 Validation Accuracy 82.39\n","Epoch 0012  Training Loss 99.36 Validation Loss 99.17 Training Accuracy 83.35 Validation Accuracy 82.00\n","Epoch 0013  Training Loss 104.60 Validation Loss 99.32 Training Accuracy 82.13 Validation Accuracy 81.87\n","Epoch 0014  Training Loss 98.06 Validation Loss 93.65 Training Accuracy 83.52 Validation Accuracy 83.50\n","Epoch 0015  Training Loss 91.75 Validation Loss 91.53 Training Accuracy 85.21 Validation Accuracy 83.77\n","Epoch 0016  Training Loss 90.01 Validation Loss 92.26 Training Accuracy 85.82 Validation Accuracy 84.25\n","Epoch 0017  Training Loss 86.61 Validation Loss 91.20 Training Accuracy 86.63 Validation Accuracy 83.83\n","Epoch 0018  Training Loss 84.39 Validation Loss 90.41 Training Accuracy 87.30 Validation Accuracy 84.11\n","Epoch 0019  Training Loss 82.48 Validation Loss 87.04 Training Accuracy 88.00 Validation Accuracy 85.18\n","Epoch 0020  Training Loss 80.24 Validation Loss 84.59 Training Accuracy 88.58 Validation Accuracy 85.61\n"]},{"output_type":"display_data","data":{"text/plain":["<Figure size 432x288 with 1 Axes>"],"image/png":"\n"},"metadata":{"needs_background":"light"}},{"output_type":"display_data","data":{"text/plain":["<Figure size 432x288 with 1 Axes>"],"image/png":"\n"},"metadata":{"needs_background":"light"}}]},{"cell_type":"code","source":["mean_test_loss = float(loss_function(messages_test, labels_test)) \n","print('Mean Test Loss: %.2f' % (mean_test_loss))\n","\n","test_prediction = eval_op(messages_test).argmax(1)\n","test_acc = ((np.array(test_prediction).flatten() == labels_test).sum())/labels_test.shape[0]\n","print('Test set accuracy: %.2f' % (test_acc*100))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"DOJREIbZ-XsG","executionInfo":{"status":"ok","timestamp":1649439144718,"user_tz":240,"elapsed":2615,"user":{"displayName":"ECE324 Group","userId":"00541832639107211620"}},"outputId":"5102d3c5-2bac-435b-db78-040bf1c37c2f"},"execution_count":18,"outputs":[{"output_type":"stream","name":"stdout","text":["Mean Test Loss: 3184.44\n","Test set accuracy: 85.23\n"]}]},{"cell_type":"code","source":["# fill this in: \n","gru_rnn_cropped = objax.nn.Sequential([   \n","    Embed(max_vocab, embedding_size),   \n","    GRU(embedding_size, num_hidden_units_GRU),\n","    objax.nn.Linear(num_hidden_units_GRU, num_hidden_units),\n","    objax.functional.relu,\n","])"],"metadata":{"id":"NbodwGIlJDGb","executionInfo":{"status":"ok","timestamp":1649439144719,"user_tz":240,"elapsed":9,"user":{"displayName":"ECE324 Group","userId":"00541832639107211620"}}},"execution_count":19,"outputs":[]},{"cell_type":"code","source":["gru_rnn_cropped[0] = gru_rnn[0]\n","gru_rnn_cropped[1] = gru_rnn[1]\n","gru_rnn_cropped[2] = gru_rnn[2]\n","gru_rnn_cropped[3] = gru_rnn[3]"],"metadata":{"id":"dpcClASsKP_n","executionInfo":{"status":"ok","timestamp":1649439144719,"user_tz":240,"elapsed":7,"user":{"displayName":"ECE324 Group","userId":"00541832639107211620"}}},"execution_count":20,"outputs":[]},{"cell_type":"code","source":["def loss_function(x: JaxArray, y: JaxArray):\n","    logits = gru_rnn(x, initial_state=jn.zeros((x.shape[0], num_hidden_units_GRU)))\n","    return objax.functional.loss.cross_entropy_logits_sparse(logits, y).sum()\n","\n","gv = objax.GradValues(loss_function, gru_rnn.vars())\n","\n","@objax.Function.with_vars(gv.vars() + opt.vars())\n","def train_op(x: JaxArray, y: JaxArray, lr: float):\n","    g, loss = gv(x, y)\n","    opt(lr, g)\n","    return loss\n","\n","train_op = objax.Jit(train_op)\n","eval_op = objax.Jit(lambda x: gru_rnn(x, initial_state=jn.zeros((x.shape[0], num_hidden_units_GRU))),\n","                    gru_rnn.vars())"],"metadata":{"id":"rc8MPMSuK6bo","executionInfo":{"status":"ok","timestamp":1649439144884,"user_tz":240,"elapsed":8,"user":{"displayName":"ECE324 Group","userId":"00541832639107211620"}}},"execution_count":21,"outputs":[]},{"cell_type":"code","source":["gru_rnn_cropped(messages_train[0:2], initial_state=jn.zeros((messages_train[0:2].shape[0], num_hidden_units_GRU)))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"DiwQCnNZ-ctC","executionInfo":{"status":"ok","timestamp":1649440881464,"user_tz":240,"elapsed":370,"user":{"displayName":"ECE324 Group","userId":"00541832639107211620"}},"outputId":"92868169-6fed-47ff-e522-8e4e7251f118"},"execution_count":32,"outputs":[{"output_type":"execute_result","data":{"text/plain":["DeviceArray([[0.        , 0.        , 0.        , 0.        , 0.717485  ,\n","              0.        , 0.08392151, 0.9249822 , 0.34302986, 0.        ,\n","              0.08904894, 0.        , 0.55689245, 0.        , 0.        ,\n","              0.59559345, 1.2613649 , 0.44618636, 0.        , 0.        ],\n","             [0.02000462, 0.        , 0.45789713, 0.        , 0.16100678,\n","              0.5661421 , 0.        , 0.        , 0.        , 0.50379544,\n","              0.        , 0.38365886, 0.09900117, 0.        , 0.04094871,\n","              0.        , 0.        , 0.        , 0.        , 0.        ]],            dtype=float32)"]},"metadata":{},"execution_count":32}]},{"cell_type":"code","source":["objax.io.save_var_collection('text_to_embedding_weights.npz', gru_rnn_cropped.vars())"],"metadata":{"id":"aWPw0ArYNaBt","executionInfo":{"status":"ok","timestamp":1649440611202,"user_tz":240,"elapsed":140,"user":{"displayName":"ECE324 Group","userId":"00541832639107211620"}}},"execution_count":25,"outputs":[]},{"cell_type":"code","source":["new_net = objax.nn.Sequential([   \n","    Embed(max_vocab, embedding_size),   \n","    GRU(embedding_size, num_hidden_units_GRU),\n","    objax.nn.Linear(num_hidden_units_GRU, num_hidden_units),\n","    objax.functional.relu,\n","])\n","objax.io.load_var_collection('text_to_embedding_weights.npz', new_net.vars())"],"metadata":{"id":"lE4rBcrHUlml","executionInfo":{"status":"ok","timestamp":1649440672692,"user_tz":240,"elapsed":361,"user":{"displayName":"ECE324 Group","userId":"00541832639107211620"}}},"execution_count":26,"outputs":[]},{"cell_type":"code","source":["new_net(messages_train[0:2], initial_state=jn.zeros((messages_train[0:2].shape[0], num_hidden_units_GRU)))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"uqnCeZhnVa2S","executionInfo":{"status":"ok","timestamp":1649440840411,"user_tz":240,"elapsed":835,"user":{"displayName":"ECE324 Group","userId":"00541832639107211620"}},"outputId":"8dc1fc32-46d7-4e16-a0fa-225afdb3d483"},"execution_count":31,"outputs":[{"output_type":"execute_result","data":{"text/plain":["DeviceArray([[0.        , 0.        , 0.        , 0.        , 0.717485  ,\n","              0.        , 0.08392151, 0.9249822 , 0.34302986, 0.        ,\n","              0.08904894, 0.        , 0.55689245, 0.        , 0.        ,\n","              0.59559345, 1.2613649 , 0.44618636, 0.        , 0.        ],\n","             [0.02000462, 0.        , 0.45789713, 0.        , 0.16100678,\n","              0.5661421 , 0.        , 0.        , 0.        , 0.50379544,\n","              0.        , 0.38365886, 0.09900117, 0.        , 0.04094871,\n","              0.        , 0.        , 0.        , 0.        , 0.        ]],            dtype=float32)"]},"metadata":{},"execution_count":31}]}]}